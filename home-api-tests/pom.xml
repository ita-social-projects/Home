<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>home</artifactId>
        <groupId>com.softserveinc.ita.homeproject</groupId>
        <version>${revision}</version>
    </parent>

    <packaging>jar</packaging>
    <artifactId>home-api-tests</artifactId>

    <properties>
        <api.tests.verbose.logging>true</api.tests.verbose.logging>
        <docker-files>${basedir}/target/docker</docker-files>
        <docker.image.data.migration>homeacademy/data-migration:${docker.revision}</docker.image.data.migration>
        <docker.image.application>homeacademy/home-application:${docker.revision}</docker.image.application>
        <docker.image.oauth-server>homeacademy/home-oauth-server:${docker.revision}</docker.image.oauth-server>
        <docker.image.postgres>postgres</docker.image.postgres>
        <docker.image.mailhog>mailhog/mailhog</docker.image.mailhog>
        <docker.image.psql>governmentpaas/psql</docker.image.psql>
        <home.application.internal.port>8080</home.application.internal.port>
        <home.oauth.server.internal.port>9000</home.oauth.server.internal.port>
        <jacoco-agent-name>jacocoagent.jar</jacoco-agent-name>
        <jacoco.agent.internal.port>6300</jacoco.agent.internal.port>
        <jacoco.version>0.8.6</jacoco.version>
        <liquibase.internal.port>8000</liquibase.internal.port>
        <mailhog.api.port>8025</mailhog.api.port>
        <mail.host>mailhog</mail.host>
        <mail.port>1025</mail.port>
        <cron.send.apartment.email>* * * * * ?</cron.send.apartment.email>
        <cron.send.cooperation.email>* * * * * ?</cron.send.cooperation.email>
        <cron.send.password.restoration.email>* * * * * ?</cron.send.password.restoration.email>
        <postgres.internal.port>5432</postgres.internal.port>
        <postgres.db>postgres</postgres.db>
        <postgres.url>jdbc:postgresql://${docker.image.postgres}:${postgres.internal.port}/${postgres.db}</postgres.url>
    </properties>

    <profiles>
        <profile>
            <id>push.images</id>
            <properties>
                <docker.image.data.migration>${image.liquibase.path}</docker.image.data.migration>
                <docker.image.application>${image.application.path}</docker.image.application>
                <docker.image.oauth.server>${image.oauth.server.path}</docker.image.oauth.server>
            </properties>
        </profile>
        <profile>
            <id>jacoco</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.softserveinc.ita.homeproject</groupId>
                    <artifactId>home-data-migration</artifactId>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>com.softserveinc.ita.homeproject</groupId>
                    <artifactId>home-application</artifactId>
                    <version>${revision}</version>
                    <scope>provided</scope>
                    <exclusions>
                        <exclusion>
                            <groupId>com.softserveinc.ita.homeproject</groupId>
                            <artifactId>home-generated-server</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>com.softserveinc.ita.homeproject</groupId>
                    <artifactId>home-service</artifactId>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>com.softserveinc.ita.homeproject</groupId>
                    <artifactId>home-data</artifactId>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>com.softserveinc.ita.homeproject</groupId>
                    <artifactId>home-oauth-server</artifactId>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-jacoco-agent</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.jacoco</groupId>
                                            <artifactId>org.jacoco.agent</artifactId>
                                            <version>${jacoco.version}</version>
                                            <classifier>runtime</classifier>
                                            <type>jar</type>
                                            <destFileName>${jacoco-agent-name}</destFileName>
                                        </artifactItem>
                                    </artifactItems>
                                    <outputDirectory>${docker-files}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>collect-coverage</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>dump</goal>
                                    <goal>report-aggregate</goal>
                                </goals>
                                <configuration>
                                    <port>${jacoco.agent.external.port}</port>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>api-tests-infrastructure</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>reserve-port</id>
                                <goals>
                                    <goal>reserve-network-port</goal>
                                </goals>
                                <phase>process-resources</phase>
                                <configuration>
                                    <portNames>
                                        <portName>home.application.external.port</portName>
                                        <portName>home.oauth.external.port</portName>
                                        <portName>jacoco.agent.external.port</portName>
                                        <portName>liquibase.external.port</portName>
                                        <portName>postgres.external.port</portName>
                                        <portName>mailhog.external.port</portName>
                                    </portNames>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <extensions>true</extensions>
                        <configuration>
                            <verbose>true</verbose>
                            <images>
                                <image>
                                    <alias>${docker.image.mailhog}</alias>
                                    <name>${docker.image.mailhog}</name>
                                    <run>
                                        <ports>
                                            <port>${mailhog.external.port}:${mailhog.api.port}</port>
                                            <port>${mail.port}</port>
                                        </ports>
                                        <wait>
                                            <time>5000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <alias>${docker.image.postgres}</alias>
                                    <name>${docker.image.postgres}</name>
                                    <build>
                                        <from>${docker.image.postgres}</from>
                                    </build>
                                    <run>
                                        <env>
                                            <POSTGRES_DB>${postgres.db}</POSTGRES_DB>
                                            <POSTGRES_USER>${postgres.user}</POSTGRES_USER>
                                            <POSTGRES_PASSWORD>${postgres.password}</POSTGRES_PASSWORD>
                                        </env>
                                        <ports>
                                            <port>${postgres.external.port}:${postgres.internal.port}</port>
                                        </ports>
                                        <wait>
                                            <log>database system is ready to accept connections</log>
                                            <time>25000</time>
                                        </wait>
                                        <log>
                                            <enabled>${api.tests.verbose.logging}</enabled>
                                            <date>default</date>
                                        </log>
                                    </run>
                                </image>
                                <image>
                                    <alias>${docker.image.data.migration}</alias>
                                    <name>${docker.image.data.migration}</name>
                                    <build>
                                        <from>${docker.image.data.migration}</from>
                                    </build>
                                    <run>
                                        <env>
                                            <DATASOURCE_URL>${postgres.url}</DATASOURCE_URL>
                                            <DATASOURCE_USER>${postgres.user}</DATASOURCE_USER>
                                            <DATASOURCE_PASSWORD>${postgres.password}</DATASOURCE_PASSWORD>
                                        </env>
                                        <ports>
                                            <port>${liquibase.external.port}:${liquibase.internal.port}</port>
                                        </ports>
                                        <links>
                                            <link>${docker.image.postgres}</link>
                                        </links>
                                        <wait>
                                            <log>Successfully released change log lock</log>
                                            <log>exit code 0</log>
                                            <time>60000</time>
                                            <exit>0</exit>
                                        </wait>
                                        <log>
                                            <enabled>${api.tests.verbose.logging}</enabled>
                                            <date>default</date>
                                        </log>
                                    </run>
                                </image>
                                <image>
                                    <alias>${docker.image.oauth-server}</alias>
                                    <name>${docker.image.oauth-server}</name>
                                    <build>
                                        <from>${docker.image.oauth-server}</from>
                                    </build>
                                    <run>
                                        <env>
                                            <DATASOURCE_URL>${postgres.url}</DATASOURCE_URL>
                                            <DATASOURCE_USER>${postgres.user}</DATASOURCE_USER>
                                            <DATASOURCE_PASSWORD>${postgres.password}</DATASOURCE_PASSWORD>
                                        </env>
                                        <ports>
                                            <port>${home.oauth.external.port}:${home.oauth.server.internal.port}</port>
                                        </ports>
                                        <links>
                                            <link>${docker.image.postgres}</link>
                                        </links>
                                        <wait>
                                            <log>Started HomeOauthServerApplication</log>
                                            <time>300000</time>
                                        </wait>
                                        <log>
                                            <enabled>${api.tests.verbose.logging}</enabled>
                                            <date>default</date>
                                        </log>
                                    </run>
                                </image>
                                <image>
                                    <alias>${docker.image.psql}</alias>
                                    <name>${docker.image.psql}</name>
                                    <run>
                                        <volumes>
                                            <bind>
                                                <volume>${project.build.testOutputDirectory}:/sql</volume>
                                            </bind>
                                        </volumes>
                                        <cmd>
                                            <exec>
                                                <arg>/bin/sh</arg>
                                                <arg>-c</arg>
                                                <arg>${psql.script.cmd.command}</arg>
                                            </exec>
                                        </cmd>
                                        <links>
                                            <link>${docker.image.postgres}</link>
                                        </links>
                                        <dependsOn>
                                            <container>${docker.image.data.migration}</container>
                                        </dependsOn>
                                        <wait>
                                            <time>5000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <alias>${docker.image.application}</alias>
                                    <name>${docker.image.application}</name>
                                    <build>
                                        <from>${docker.image.application}</from>
                                    </build>
                                    <run>
                                        <env>
                                            <DATASOURCE_URL>${postgres.url}</DATASOURCE_URL>
                                            <DATASOURCE_USER>${postgres.user}</DATASOURCE_USER>
                                            <DATASOURCE_PASSWORD>${postgres.password}</DATASOURCE_PASSWORD>
                                            <LIQUIBASE_MIGRATION>true</LIQUIBASE_MIGRATION>
                                            <JACOCO_VERSION>${jacoco.version}</JACOCO_VERSION>
                                            <JAVA_TOOL_OPTIONS>
                                                -javaagent:/jacoco/${jacoco-agent-name}=port=${jacoco.agent.internal.port},append=true,output=tcpserver,address=*
                                            </JAVA_TOOL_OPTIONS>
                                            <MAIL_HOST>${mail.host}</MAIL_HOST>
                                            <MAIL_PORT>${mail.port}</MAIL_PORT>
                                            <HOME_JOBS_SENDAPARTMENTEMAIL_CRON>${cron.send.apartment.email}</HOME_JOBS_SENDAPARTMENTEMAIL_CRON>
                                            <HOME_JOBS_SENDCOOPERATIONEMAIL_CRON>${cron.send.cooperation.email}</HOME_JOBS_SENDCOOPERATIONEMAIL_CRON>
                                            <HOME_JOBS_SENDPASSWORDRESTORATIONEMAIL_CRON>${cron.send.password.restoration.email}</HOME_JOBS_SENDPASSWORDRESTORATIONEMAIL_CRON>
                                        </env>
                                        <volumes>
                                            <bind>
                                                <volume>${docker-files}:/jacoco</volume>
                                            </bind>
                                        </volumes>
                                        <ports>
                                            <port>${home.application.external.port}:${home.application.internal.port}
                                            </port>
                                            <port>${jacoco.agent.external.port}:${jacoco.agent.internal.port}</port>
                                        </ports>
                                        <links>
                                            <link>${docker.image.postgres}</link>
                                            <link>${docker.image.mailhog}</link>
                                        </links>
                                        <wait>
                                            <log>Started HomeApplication</log>
                                            <time>300000</time>
                                        </wait>
                                        <log>
                                            <enabled>${api.tests.verbose.logging}</enabled>
                                            <date>default</date>
                                        </log>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>api-tests</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <home.application.external.port>${home.application.external.port}
                                </home.application.external.port>
                                <home.oauth.external.port>${home.oauth.external.port}</home.oauth.external.port>
                                <postgres.external.port>${postgres.external.port}</postgres.external.port>
                                <liquibase.external.port>${liquibase.external.port}</liquibase.external.port>
                                <mailhog.external.port>${mailhog.external.port}</mailhog.external.port>
                                <verbose.tests.logging>${api.tests.verbose.logging}</verbose.tests.logging>
                            </systemPropertyVariables>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
        </dependency>
        <dependency>
            <groupId>com.softserveinc.ita.homeproject</groupId>
            <artifactId>home-java-client</artifactId>
        </dependency>
        <dependency>
            <groupId>com.softserveinc.ita.homeproject</groupId>
            <artifactId>home-oauth-server</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
