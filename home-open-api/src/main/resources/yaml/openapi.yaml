openapi: 3.0.3

info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  license:
    name: MIT License
    url: https://opensource.org/licenses/mit-license.php
  contact:
    url: https://github.com/ita-social-projects/Home
  version: 1.0.0

servers:
  - url: /api/0

tags:
  - name: news
    description: News management operations
  - name: user
    description: User management operations
  - name: contact
    description: Contact management operations
  - name: cooperation
    description: Cooperation management
  - name: house
    description: Operations with house
  - name: address
    description: Operations with address
  - name: apartment
    description: Apartment management operations
  - name: apartment ownership
    description: Apartment ownership management operations
  - name: apartment invitation
    description: Apartment invitation management operations
  - name: cooperation poll
    description: Cooperation poll management operations
  - name: poll
    description: Poll management operations  independently from cooperation

paths:
  /news:
    post:
      tags:
        - news
      summary: Add a News to the home page
      description: The endpoint adds a News to the home page
      operationId: createNews
      requestBody:
        $ref: '#/components/requestBodies/CreateNewsBody'
      responses:
        201:
          $ref: '#/components/responses/NewsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all News to the home page
      description: This endpoint delivers all News to the Home Page
      operationId: getAllNews
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/text'
        - $ref: '#/components/parameters/source'
      responses:
        200:
          $ref: '#/components/responses/NewsListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its ID
      description: View an existing news by its ID
      operationId: getNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/NewsResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing News
      description: Update an existing News by its ID
      operationId: updateNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateNewsBody'
      responses:
        200:
          $ref: '#/components/responses/NewsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      description: Delete news by ID
      operationId: deleteNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users:
    post:
      tags:
        - user
      summary: Create user
      description: The endpoint creates a new User
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserBody'
      responses:
        201:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: Get all Users
      description: The endpoint gets all Users
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/first_name'
        - $ref: '#/components/parameters/last_name'
        - $ref: '#/components/parameters/contact_phone'
        - $ref: '#/components/parameters/contact_email'
      responses:
        200:
          $ref: '#/components/responses/UsersResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - user
      summary: Get User by ID
      description: The endpoint gets User by ID
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current User
      description: The endpoint updates current User by ID
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserBody'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: The endpoint deletes User by ID
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/contacts:
    post:
      tags:
        - contact
      summary: Create new Contact for the User
      description: The endpoint creates a new Contact for the specified user ID
      operationId: createContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateContactBody'
      responses:
        201:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - contact
      summary: Get all Contacts by User
      description: The endpoint retrieves the list of contacts associated with the specified user ID
      operationId: queryContactsOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/main'
        - $ref: '#/components/parameters/type'

      responses:
        200:
          $ref: '#/components/responses/ContactsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/contacts/{id}:
    get:
      tags:
        - contact
      summary: Get Contact by ID
      description: The endpoint retrieves an existing contact
                   associated with the specified User by User and Contact IDs
      operationId: getContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - contact
      summary: Update Contact
      description: The endpoint updates information on a contact that exists
                  in the system by the specified User and Contact IDs
      operationId: updateContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContactBody'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - contact
      summary: Delete Contact
      description: The endpoint deletes an existing Contact on a User associated with the
                   specified User and Contact IDs
      operationId: deleteContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation:
    post:
      tags:
        - cooperation
      summary: Create Cooperation
      description: The endpoint creates a new Cooperation
      operationId: createCooperation
      requestBody:
        $ref: '#/components/requestBodies/CreateCooperationBody'
      responses:
        201:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation
      summary: Get All Cooperations
      description: Get all cooperation
      operationId: queryCooperation
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/iban'
        - $ref: '#/components/parameters/usreo'
      responses:
        200:
          $ref: '#/components/responses/CooperationsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{id}:
    get:
      tags:
        - cooperation
      summary: Get Cooperation by ID
      description: The endpoint gets Cooperation by ID
      operationId: getCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation
      summary: Update current Cooperation
      description: The endpoint updates current Cooperation by ID
      operationId: updateCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCooperationBody'
      responses:
        200:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation
      summary: Delete cooperation by ID
      description: The endpoint deletes Cooperation by ID
      operationId: deleteCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/NoContentResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/houses:
    post:
      tags:
        - house
      summary: Create new House for the Cooperation
      description: The endpoint creates a new House for the specified Cooperation ID
      operationId: createHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateHouseBody'
      responses:
        201:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - house
      summary: Get all Houses by Cooperation
      description: The endpoint retrieves the list of houses associated with the specified cooperation ID
      operationId: queryHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/quantity_flat'
        - $ref: '#/components/parameters/adjoining_area'
        - $ref: '#/components/parameters/house_area'

      responses:
        200:
          $ref: '#/components/responses/HousesResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/houses/{id}:
    get:
      tags:
        - house
      summary: Get House by ID
      description: The endpoint retrieves an existing house
        associated with the specified Cooperation by Cooperation and House IDs
      operationId: getHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - house
      summary: Update current House
      description: The endpoint updates information on a house that exists
        in the system by the specified Cooperation and House IDs
      operationId: updateHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateHouseBody'
      responses:
        200:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - house
      summary: Delete house by ID
      description: The endpoint deletes an existing House on a Cooperation associated with the
        specified Coopeartion and House IDs
      operationId: deleteHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/contacts:
    post:
      tags:
        - cooperation contact
      summary: Create new Contact for the Cooperation
      description: The endpoint creates Contacts for the specified Cooperation ID
      operationId: createContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateContactBody'
      responses:
        201:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation contact
      summary: Get all Contacts by Cooperation ID
      description: The endpoint retrieves the list of contacts associated with the specified cooperation ID
      operationId: queryContactsOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/main'
        - $ref: '#/components/parameters/type'
      responses:
        200:
          $ref: '#/components/responses/ContactsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/contacts/{id}:
    get:
      tags:
        - cooperation contact
      summary: Get Contact by ID
      description: The endpoint retrieves an existing contact
        associated with the specified Cooperation by Cooperation and Contact IDs
      operationId: getContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation contact
      summary: Update Contact
      description: The endpoint updates information on a contact that exists
          in the system by the specified Cooperation and Contact IDs
      operationId: updateContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContactBody'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation contact
      summary: Delete Contact
      description: The endpoint deletes an existing Contact on a Cooperation associated with the
        specified Cooperation and Contact IDs
      operationId: deleteContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /houses/{house_id}/apartments:
    get:
      tags:
        - apartment
      summary: Get all apartments
      description: The endpoint gets all apartments of the house
      operationId: queryApartment
      parameters:
        - $ref: '#/components/parameters/p_house_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/apartment_number'
        - $ref: '#/components/parameters/apartment_area'
      responses:
        200:
          $ref: '#/components/responses/ApartmentsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - apartment
      summary: Create new Apartment for the House
      description: The endpoint creates a new Apartment for specified House ID
      operationId: createApartment
      parameters:
        - $ref: '#/components/parameters/p_house_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateApartmentBody'
      responses:
        201:
          $ref: '#/components/responses/ApartmentResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

  /houses/{house_id}/apartments/{id}:
    get:
      tags:
        - apartment
      summary: Get apartment by ID
      description: The endpoint retrieves an existing apartment
        associated with the specified House by House and Aparment IDs
      operationId: getApartment
      parameters:
        - $ref: '#/components/parameters/p_house_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/ApartmentResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - apartment
      summary: Update apartment
      description: Update an apartment by apartment ID
      operationId: updateApartment
      parameters:
        - $ref: '#/components/parameters/p_house_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
         $ref: '#/components/requestBodies/UpdateApartmentBody'
      responses:
        200:
          $ref: '#/components/responses/ApartmentResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - apartment
      summary: Delete apartment
      description: Delete an apartment by an apartment ID
      operationId: deleteApartment
      parameters:
        - $ref: '#/components/parameters/p_house_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /apartments/{apartment_id}/ownerships:
    get:
      tags:
        - apartment ownership
      summary: Get all ownerships
      description: The endpoint gets all ownerships for the apartment
      operationId: queryOwnership
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/ownership_part'
      responses:
        200:
          $ref: '#/components/responses/OwnershipsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /apartments/{apartment_id}/ownerships/{id}:
    get:
      tags:
        - apartment ownership
      summary: Get ownership by ID
      description: The endpoint gets an ownership for an apartment by an ownership ID
      operationId: getOwnership
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_ownership_id'
      responses:
        200:
          $ref: '#/components/responses/OwnershipResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - apartment ownership
      summary: Update ownership
      description: The endpoint updates an ownership for an apartment by ID
      operationId: updateOwnership
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_ownership_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateOwnershipBody'
      responses:
        200:
          $ref: '#/components/responses/OwnershipResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - apartment ownership
      summary: Delete ownership
      description: The endpoint deletes an ownership for an apartment by ID
      operationId: deleteOwnership
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_ownership_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /apartments/{apartment_id}/invitations:
    get:
      tags:
        - apartment invitation
      summary: Get all invitations
      description: The endpoint gets all invitations for apartment owners
      operationId: queryInvitation
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/ownership_part'
        - $ref: '#/components/parameters/status'
      responses:
        200:
          $ref: '#/components/responses/ApartmentInvitationsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - apartment invitation
      summary: Create invitation
      description: The endpoint creates an invitation for an apartment owner
      operationId: createInvitation
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateApartmentInvitationBody'
      responses:
        201:
          $ref: '#/components/responses/ApartmentInvitationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
  /apartments/{apartment_id}/invitations/{id}:
    get:
      tags:
        - apartment invitation
      summary: Get invitation by ID
      description: The endpoint gets an invitation for an apartment owner by an invitation ID
      operationId: getInvitation
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_invitation_id'
      responses:
        200:
          $ref: '#/components/responses/ApartmentInvitationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - apartment invitation
      summary: Update invitation
      description: The endpoint updates an invitation for an apartment owner by ID. Email can be updated with Invitation status 'pending' only
      operationId: updateInvitation
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_invitation_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateApartmentInvitationBody'
      responses:
        200:
          $ref: '#/components/responses/ApartmentInvitationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - apartment invitation
      summary: Delete invitation
      description: The endpoint deletes an invitation for an apartment owner by ID with status 'pending' and 'error'
      operationId: deleteInvitation
      parameters:
        - $ref: '#/components/parameters/p_apartment_id'
        - $ref: '#/components/parameters/p_invitation_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/polls:
    get:
      tags:
        - cooperation poll
      summary: Get all cooperation polls
      description: The endpoint gets all cooperation polls
      operationId: queryCooperationPoll
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/creation_date'
        - $ref: '#/components/parameters/completion_date'
        - $ref: '#/components/parameters/poll_type'
        - $ref: '#/components/parameters/poll_status'
      responses:
        200:
          $ref: '#/components/responses/PollsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - cooperation poll
      summary: Create cooperation poll
      description: The endpoint creates a new cooperation poll
      operationId: createCooperationPoll
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
          $ref: '#/components/requestBodies/CreatePollBody'
      responses:
        201:
          $ref: '#/components/responses/PollResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/polls/{id}:
    get:
      tags:
        - cooperation poll
      summary: Get cooperation poll
      description: Get a cooperation poll by a poll id
      operationId: getCooperationPoll
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/PollResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation poll
      summary: Update cooperation poll
      description: Update a cooperation poll by a poll ID. Poll can be updated only if its status is draft
      operationId: updateCooperationPoll
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
          $ref: '#/components/requestBodies/UpdatePollBody'
      responses:
        200:
          $ref: '#/components/responses/PollResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation poll
      summary: Delete cooperation poll
      description: Delete a cooperation poll by a poll ID. Poll can be deleted only if its status is draft
      operationId: deleteCooperationPoll
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls:
    get:
      tags:
        - poll
      summary: Get all polls
      description: The endpoint gets all polls
      operationId: queryPoll
      parameters:
        - $ref: '#/components/parameters/cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/creation_date'
        - $ref: '#/components/parameters/completion_date'
        - $ref: '#/components/parameters/poll_type'
        - $ref: '#/components/parameters/poll_status'
      responses:
        200:
          $ref: '#/components/responses/PollsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls/{id}:
    get:
      tags:
        - poll
      summary: Get poll
      description: Get a poll by a poll id
      operationId: getPoll
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/PollResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls/{poll_id}/questions:
    get:
      tags:
        - poll question
      summary: Get all questions
      description: The endpoint gets all questions of the poll
      operationId: queryQuestion
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/question_type'
      responses:
        '200':
          $ref: '#/components/responses/QuestionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - poll question
      summary: Create question
      description: The endpoint creates a question in the poll. Question can be created only if poll status is draft
      operationId: createQuestion
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
      requestBody:
         $ref: '#/components/requestBodies/CreateQuestionBody'
      responses:
        '201':
         $ref: '#/components/responses/QuestionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls/{poll_id}/questions/{id}:
    get:
      tags:
        - poll question
      summary: Get question
      description: Get a question by a question id
      operationId: getQuestion
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        '200':
          $ref: '#/components/responses/QuestionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - poll question
      summary: Update question
      description: Update a question by a question ID. Question can be updated only if poll status is draft
      operationId: updateQuestion
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateQuestionBody'
      responses:
        '200':
          $ref: '#/components/responses/QuestionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - poll question
      summary: Delete question
      description: Delete a question by a question ID. Question can be deleted only if poll status is draft
      operationId: deleteQuestion
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls/{poll_id}/houses:
    get:
      tags:
        - polled house
      summary: Get all polled houses
      description: The endpoint gets all polled houses of the poll
      operationId: queryPolledHouse
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/quantity_flat'
        - $ref: '#/components/parameters/adjoining_area'
        - $ref: '#/components/parameters/house_area'
      responses:
        200:
          $ref: '#/components/responses/HousesResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - polled house
      summary: Create polled house
      description: The endpoint creates a polled house in the poll. House can be created only if poll status is draft
      operationId: createPolledHouse
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
      requestBody:
          $ref: '#/components/requestBodies/LookupHouseBody'
      responses:
        204:
          description: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

  /polls/{poll_id}/houses/{id}:
    get:
      tags:
        - polled house
      summary: Get polled house
      description: Get a polled house by a polled house id
      operationId: getPolledHouse
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/PollHouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - polled house
      summary: Delete polled house
      description: Delete a polled house by a polled house ID. House can be deleted only if poll status is draft
      operationId: deletePolledHouse
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

security:
  - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    BaseReadView:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 70
        photo_url:
          type: string
          format: url
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          example: Gas turn off
        source:
          type: string
          example: Example
        text:
          type: string
          example: example
    CreateNews:
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photo_url:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    UpdateNews:
      type: object
      required:
        - title
        - description
        - text
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 70
          example: example
        photo_url:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    ApiError:
      type: object
      properties:
        response_code:
          type: integer
          example: 404
        error_message:
          type: string
          example: example
    CreateUser:
      required:
        - first_name
        - last_name
        - email
        - password
      type: object
      properties:
        first_name:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        last_name:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 320
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
        contacts:
          type: array
          example:
            - type: "email"
            - id: 1
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: '#/components/schemas/CreateContact'
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        first_name:
          type: string
          example: Petro
        last_name:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contacts:
          type: array
          example:
            - type: "email"
            - id: 1
            - main: false
            - email: "readUserEmail@example.com"
          items:
            $ref: '#/components/schemas/ReadContact'
    UpdateUser:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        last_name:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          minLength: 5
          maxLength: 320
          type: string
          example: example@gmail.com
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ContactType:
      description: Indicates the type of contact
      type: string
      enum:
        - email
        - phone
    ReadContact:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/ReadEmailContact'
          phone: '#/components/schemas/ReadPhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    ReadEmailContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        email:
          type: string
          example: home@gmail.com
    ReadPhoneContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380506617305"
    CreateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/CreateEmailContact'
          phone: '#/components/schemas/CreatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          default: false
          type: boolean
          example: false
    CreateEmailContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      required:
        - email
      properties:
        email:
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: home@gmail.com
    CreatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      required:
        - phone
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380506617305"
    UpdateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/UpdateEmailContact'
          phone: '#/components/schemas/UpdatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    UpdateEmailContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      required:
        - email
      properties:
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          minLength: 9
          maxLength: 320
          type: string
          example: test.receive.messages@gmail.com
    UpdatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      required:
        - phone
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380966617305"
    CreateCooperation:
      required:
        - name
        - usreo
        - iban
        - address
        - admin_email
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 34
        admin_email:
          type: string
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          example: test.receive.messages@gmail.com
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          example: List of houses
          items:
            $ref: "#/components/schemas/CreateHouse"
        contacts:
          type: array
          example:
            - type: "email"
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: "#/components/schemas/CreateContact"

    ReadCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 50
        admin_email:
          type: string
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          example: test.receive.messages@gmail.com
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          example: List of houses
          items:
            $ref: "#/components/schemas/ReadHouse"
        contacts:
          type: array
          example:
            - type: "email"
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: "#/components/schemas/ReadContact"
    UpdateCooperation:
      required:
        - name
        - usreo
        - iban
        - address
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 50
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        region:
          type: string
          example: "Dnipropetrovsk region"
          minLength: 1
          maxLength: 50
        city:
          type: string
          example: "Dnipro"
          minLength: 1
          maxLength: 50
        district:
          type: string
          example: "Zavodskoy"
          minLength: 1
          maxLength: 50
        street:
          type: string
          example: "Kirova"
          minLength: 1
          maxLength: 25
        house_block:
          type: string
          example: "2/B"
          minLength: 1
          maxLength: 10
        house_number:
          type: string
          example: "23-B"
          minLength: 1
          maxLength: 10
        zip_code:
          type: string
          example: 52956
    CreateHouse:
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
    ReadHouse:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
    UpdateHouse:
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'

    InvitationStatus:
       description: Indicates the status of an Invitation
       type: string
       enum:
          - pending
          - processing
          - accepted
          - declined
          - overdue
          - deactivated
          - error

    InvitationType:
      description: Indicates a type of an Invitation
      type: string
      enum:
        - cooperation
        - apartment
      example: apartment

    ReadInvitation:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      discriminator:
        propertyName: type
        mapping:
          base: '#/components/schemas/ReadCooperationInvitation'
          apartment: '#/components/schemas/ReadApartmentInvitation'
      properties:
        type:
          $ref: '#/components/schemas/InvitationType'
        email:
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: test.receive.messages@gmail.com
        status:
          $ref: '#/components/schemas/InvitationStatus'
    ReadCooperationInvitation:
      allOf:
        - $ref: '#/components/schemas/ReadInvitation'
      properties:
        role:
          $ref: '#/components/schemas/Role'
    ReadApartmentInvitation:
      allOf:
        - $ref: '#/components/schemas/ReadInvitation'
      type: object
      properties:
        ownership_part:
          type: number
          minimum: 0.0001
          maximum: 1.0
          multipleOf: 1e-4
          example: 0.6588
    Role:
      description: User role
      type: string
      enum:
        - admin
        - user
    CreateInvitation:
      type: object
      discriminator:
        propertyName: type
        mapping:
          cooperation: '#/components/schemas/CreateCooperationInvitation'
          apartment: '#/components/schemas/CreateApartmentInvitation'
      required:
        - email
      properties:
        type:
          $ref: '#/components/schemas/InvitationType'
        email:
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: test.receive.messages@gmail.com
    CreateCooperationInvitation:
      allOf:
        - $ref: '#/components/schemas/CreateInvitation'
      type: object
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/Role'
    CreateApartmentInvitation:
      allOf:
        - $ref: '#/components/schemas/CreateInvitation'
      type: object
      required:
        - ownership_part
      properties:
        ownership_part:
          type: number
          minimum: 0.0001
          maximum: 1.0
          multipleOf: 1e-4
          example: 0.6588

    UpdateInvitation:
      type: object
      required:
        - email
      properties:
        email:
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: test.receive.messages@gmail.com
    UpdateCooperationInvitation:
      allOf:
        - $ref: '#/components/schemas/UpdateInvitation'
    UpdateApartmentInvitation:
      allOf:
        - $ref: '#/components/schemas/UpdateInvitation'
      type: object
      required:
        - ownership_part
      properties:
        ownership_part:
          type: number
          minimum: 0.0001
          maximum: 1.0
          multipleOf: 1e-4
          example: 0.6588

    ReadOwnership:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        user:
          $ref: '#/components/schemas/ReadUser'
        ownership_part:
          type: number
          minimum: 0.0001
          maximum: 1.0
          multipleOf: 1e-4
          example: 0.6588
    UpdateOwnership:
      type: object
      required:
        - ownership_part
      properties:
        ownership_part:
          type: number
          minimum: 0.0001
          maximum: 1.0
          multipleOf: 1e-4
          example: 0.6588

    CreateApartment:
      required:
        - number
        - area
      type: object
      properties:
        number:
          type: string
          minLength: 1
          maxLength: 6
          pattern: '^(?!(0))\d{1,4}(\-[a-zа-я])?$'
          example: 15
        area:
          type: number
          minimum: 10
          maximum: 1000
          multipleOf: 1e-2
          example: 75.28
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/CreateInvitation'
          example:
            - email: test.receive.messages@gmail.com
              type: apartment
              ownership_part: 0.3
            - email: test.receive.messages@gmail.com
              type: apartment
              ownership_part: 0.7
    UpdateApartment:
      required:
        - number
        - area
      type: object
      properties:
        number:
          type: string
          minLength: 1
          maxLength: 6
          pattern: '^(?!(0))\d{1,4}(\-[a-zа-я])?$'
          example: 15
        area:
          type: number
          minimum: 10
          maximum: 1000
          multipleOf: 1e-2
          example: 75.28
    ReadApartment:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        apartment_number:
          type: string
          minLength: 1
          maxLength: 6
          pattern: '^(?!(0))\d{1,4}(\-[a-zа-я])?$'
          example: 15
        apartment_area:
          type: number
          minimum: 10
          maximum: 1000
          multipleOf: 1e-2
          example: 75.28
        ownerships:
          type: array
          items:
            $ref: '#/components/schemas/ReadOwnership'
          example:
            - id: 1
              user:
                id: 1
                first_name: Petro
                last_name: Petrov
                contacts:
                  - id: 1
                    type: email
                    main: true
                  - id: 2
                    type: phone
                    main: false
              ownership_part: 0.72
            - id: 2
              user:
                id: 2
                first_name: Ivan
                last_name: Ivanov
                contacts:
                  - id: 3
                    type: email
                    main: true
                  - id: 4
                    type: phone
                    main: false
              ownership_part: 0.38

    HouseLookup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1

    PollStatus:
      description: Indicates the status of a Poll
      type: string
      enum: &poll_status_values
        - draft
        - active
        - completed
        - suspended
      example: active

    PollType:
      description: Indicates the type of a Poll
      type: string
      enum: &poll_type_values
        - simple
      example: simple

    ReadPoll:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        header:
          type: string
          example: New poll for our houses
        creation_date:
          type: string
          format: date-time
          example: 2021-05-30T08:30:00Z
        completion_date:
          type: string
          format: date-time
          example: 2021-06-20T06:00:00Z
        polled_houses:
          type: array
          items:
            $ref: '#/components/schemas/ReadHouse'
          example:
            - id: 1,
              quantity_flat: 45,
              house_area: 25,
              adjoining_area: 12,
              address:
                region: "Dnipropetrovsk region"
                city: "Dnipro"
                district: "Zavodskoy"
                street: "Kirova"
                house_block: "2/B"
                house_number: "23-B"
                zip_code: "52956"
            - id: 2,
              quantity_flat: 60,
              house_area: 50,
              adjoining_area: 20,
              address:
                region: "Dnipropetrovsk region"
                city: "Dnipro"
                district: "Zavodskoy"
                street: "Kirova"
                house_block: "2/C"
                house_number: "24-C"
                zip_code: "52956"
        status:
          $ref: '#/components/schemas/PollStatus'
        type:
          $ref: '#/components/schemas/PollType'
    CreatePoll:
      type: object
      required:
        - header
        - completion_date
        - houses
        - type
      properties:
        header:
          type: string
          example: New poll for our houses
        completion_date:
          type: string
          format: date-time
          example: 2021-06-20T06:00:00Z
        houses:
          type: array
          items:
            $ref: '#/components/schemas/HouseLookup'
          example:
            - id: 1
            - id: 2
        type:
          $ref: '#/components/schemas/PollType'
    UpdatePoll:
      type: object
      required:
        - header
        - completion_date
        - status
      properties:
        header:
          type: string
          example: New poll for our houses
        completion_date:
          type: string
          format: date-time
          example: 2021-06-20T06:00:00Z
        status:
          $ref: '#/components/schemas/PollStatus'
    QuestionType:
      description: Indicates a type of an Question
      type: string
      enum: &question_type_values
        - multiple_choice
        - advice
      example: advice

    QuestionLookup:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1

    ReadQuestion:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      discriminator:
        propertyName: type
        mapping:
          multiple_choice: '#/components/schemas/ReadMultipleChoiceQuestion'
          advice: '#/components/schemas/ReadAdviceQuestion'
      properties:
        type:
          $ref: '#/components/schemas/QuestionType'
        question:
          type: string
          minLength: 1
          maxLength: 255
          example: What color should we paint the door?
    ReadMultipleChoiceQuestion:
      allOf:
        - $ref: '#/components/schemas/ReadQuestion'
      type: object
      properties:
        answer_variants:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/ReadAnswerVariant'
          example:
            - id: 1
              answer: Green
            - id: 2
              answer: Blue
        max_answer_count:
          type: integer
          minimum: 1
          maximum: 100
          example: 5
    ReadAdviceQuestion:
      allOf:
        - $ref: '#/components/schemas/ReadQuestion'
      type: object

    CreateQuestion:
      type: object
      discriminator:
        propertyName: type
        mapping:
          multiple_choice: '#/components/schemas/CreateMultipleChoiceQuestion'
          advice: '#/components/schemas/CreateAdviceQuestion'
      required:
        - type
        - question
      properties:
        type:
          $ref: '#/components/schemas/QuestionType'
        question:
          type: string
          minLength: 1
          maxLength: 255
          example: What color should we paint the door?
    CreateMultipleChoiceQuestion:
      allOf:
        - $ref: '#/components/schemas/CreateQuestion'
      type: object
      required:
        - answer_variants
        - max_answer_count
      properties:
        answer_variants:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/CreateUpdateAnswerVariant'
          example:
            - answer: Green
            - answer: Blue
        max_answer_count:
          type: integer
          minimum: 1
          maximum: 100
          example: 5
    CreateAdviceQuestion:
      allOf:
        - $ref: '#/components/schemas/CreateQuestion'
      type: object

    UpdateQuestion:
      type: object
      discriminator:
        propertyName: type
        mapping:
          multiple_choice: '#/components/schemas/UpdateMultipleChoiceQuestion'
          advice: '#/components/schemas/UpdateAdviceQuestion'
      required:
        - type
        - question
      properties:
        type:
          $ref: '#/components/schemas/QuestionType'
        question:
          type: string
          minLength: 1
          maxLength: 255
          example: What color should we paint the door?
    UpdateMultipleChoiceQuestion:
      allOf:
        - $ref: '#/components/schemas/UpdateQuestion'
      type: object
      required:
        - answer_variants
        - max_answer_count
      properties:
        answer_variants:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/CreateUpdateAnswerVariant'
          example:
            - answer: Green
            - answer: Blue
        max_answer_count:
          type: integer
          minimum: 1
          maximum: 100
          example: 5
    UpdateAdviceQuestion:
      allOf:
        - $ref: '#/components/schemas/UpdateQuestion'
    ReadAnswerVariant:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        answer:
          type: string
          minLength: 1
          maxLength: 255
          example: Green
    CreateUpdateAnswerVariant:
      type: object
      required:
        - answer
      properties:
        answer:
          type: string
          minLength: 1
          maxLength: 255
          example: Green

  responses:
    NoContentResponse:
      description: The request was succesfully processed.
    BadRequest:
      description: Validation Exception.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Conflict with current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NewsResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadNews'
    NewsListResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadNews'
    UserResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'
    UsersResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadUser"
    ContactResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadContact'
    ContactsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadContact'
    CooperationResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadCooperation'
    CooperationsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadCooperation'
    HouseResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadHouse'
    PollHouseResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadHouse'
    HousesResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadHouse'
    ApartmentResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadApartment'
    ApartmentsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadApartment"
    OwnershipResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReadOwnership"
    OwnershipsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadOwnership"
    ApartmentInvitationResponse:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadApartmentInvitation'
    ApartmentInvitationsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadApartmentInvitation"
    PollResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadPoll'
    PollsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadPoll"
    QuestionResponse:
      description: OK
      content:
        application/json:
          schema:
              $ref: "#/components/schemas/ReadQuestion"
    QuestionsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadQuestion"

  requestBodies:
    CreateNewsBody:
      description: A payload for creating a new News
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateNews'
      required: true
    UpdateNewsBody:
      description: A payload for updating an existing News
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateNews'
      required: true
    CreateUserBody:
      description: A payload for creating a User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'
      required: true
    UpdateUserBody:
      description: A payload for updating current User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUser'
      required: true
    CreateContactBody:
      description: A payload for creating a contact
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateContact'
      required: true
    UpdateContactBody:
      description: A payload for updating an existing Contact
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateContact"
      required: true
    CreateCooperationBody:
      description: A payload for creating a Cooperation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCooperation'
      required: true
    UpdateCooperationBody:
      description: A payload for updating current Cooperation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCooperation'
      required: true
    CreateHouseBody:
      description: A payload for creating a house
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateHouse'
      required: true
    UpdateHouseBody:
      description: A payload for updating an existing House
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateHouse'
      required: true
    LookupHouseBody:
      description: A payload for creating a new Poll
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HouseLookup'
      required: true
    CreateApartmentBody:
      description: A payload for creating a new Apartment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateApartment'
      required: true
    UpdateApartmentBody:
      description: A payload for updating a new Apartment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateApartment'
      required: true
    UpdateOwnershipBody:
      description: A payload for updating an ownership for the apartment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateOwnership'
      required: true
    CreateApartmentInvitationBody:
      description: A payload for creating a new Invitation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateApartmentInvitation'
    UpdateApartmentInvitationBody:
      description: A payload for updating an invitation for the apartment owner
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateApartmentInvitation'
      required: true
    CreatePollBody:
      description: A payload for creating a new cooperation poll
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePoll'
    UpdatePollBody:
      description: A payload for updating a cooperation poll
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePoll'
      required: true
    CreateQuestionBody:
      description: A payload for creating a new question
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateQuestion'
    UpdateQuestionBody:
      description: A payload for updating a question
      content:
        application/json:
         schema:
           $ref: '#/components/schemas/UpdateQuestion'
  parameters:
    p_id:
      name: id
      in: path
      description: The ID
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    p_user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    p_cooperation_id:
      name: cooperation_id
      in: path
      required: true
      description: The ID of the Cooperation
      schema:
        type: integer
        format: int64
      example: 1
    p_house_id:
      name: "house_id"
      in: path
      required: true
      description: ID of the house where apartment is located
      schema:
        type: integer
        format: int64
        minimum: 1
    p_apartment_id:
      name: "apartment_id"
      in: "path"
      description: Apartment ID to which the ownership belongs
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    p_ownership_id:
      name: "id"
      in: "path"
      description: ID of the ownership
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    p_invitation_id:
      name: "id"
      in: "path"
      description: ID of the invitation
      required: true
      schema:
        type: integer
        format: int64
      example: 1
    p_poll_id:
      name: "poll_id"
      in: "path"
      description: ID of the poll to which polled houses belongs
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    page_number:
      in: query
      name: page_number
      schema:
        type: integer
        minimum: 1
        default: 1
      required: false
      description: The number of current page.
    page_size:
      in: query
      name: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 10
        default: 5
      required: false
      description: The number of items to return.
    id:
      in: query
      name: id
      schema:
        type: integer
        format: int64
      example: 1
    user_id:
      in: query
      name: user_id
      schema:
        type: integer
        format: int64
      example: 1
    cooperation_id:
      in: query
      name: cooperation_id
      required: true
      description: ID of the polled cooperation
      schema:
        type: integer
        format: int64
        minimum: 1
      example: 1
    sort:
      in: query
      name: sort
      schema:
        type: string
        default: id,asc
    filter:
      in: query
      name: filter
      schema:
        type: string
    title:
      in: query
      name: title
      schema:
        type: string
      description: The title of the News
    text:
      in: query
      name: text
      schema:
        type: string
      description: The content of the News
    source:
      in: query
      name: source
      schema:
        type: string
      description: The source of the News
    email:
      in: query
      name: email
      schema:
        type: string
      description: The email of the User
    phone:
      in: query
      name: phone
      schema:
        type: string
      description: Phone of the Contact
    first_name:
      in: query
      name: first_name
      schema:
        type: string
      description: The First Name of the User
    last_name:
      in: query
      name: last_name
      schema:
        type: string
      description: The Last name of the User
    contact_phone:
      in: query
      name: contact_phone
      schema:
        type: string
      description: Contact phone of the User
    contact_email:
      in: query
      name: contact_email
      schema:
        type: string
      description: Contact email of the User
    main:
      in: query
      name: main
      schema:
        type: string
      description: Specifies if its a main Contact of the User
    type:
      in: query
      name: type
      schema:
        $ref: '#/components/schemas/ContactType'
      description: Type of the Contact
    name:
      in: query
      name: name
      schema:
        type: string
      example: "Dobro"
    iban:
      in: query
      name: iban
      schema:
        type: string
      example: "77778"
    usreo:
      in: query
      name: usreo
      schema:
        type: string
      example: "A9856738"
    quantity_flat:
      in: query
      name: quantity_flat
      schema:
        type: integer
      example: 10
    adjoining_area:
      in: query
      name: adjoining_area
      schema:
        type: integer
      example: 40
    house_area:
      in: query
      name: house_area
      schema:
        type: number
      example: 20
    apartment_number:
      in: query
      name: apartment_number
      schema:
        type: string
        minLength: 1
        maxLength: 6
        pattern: '^(?!(0))\d{1,4}(\-[a-zа-я])?$'
    apartment_area:
      in: query
      name: apartment_area
      schema:
        type: number
    ownership_part:
      in: query
      name: ownership_part
      schema:
        type: number
        minimum: 0.0001
        maximum: 1.0
        multipleOf: 1e-4
      example: 0.6588
    status:
      in: query
      name: status
      schema:
        type: string
      example: pending
    creation_date:
      in: query
      name: creation_date
      schema:
        type: string
        format: date-time
      example: 2021-05-30T08:30
    completion_date:
      in: query
      name: completion_date
      schema:
        type: string
        format: date-time
      example: 2021-06-20T06:00
    poll_type:
      in: query
      name: type
      schema:
        $ref: '#/components/schemas/PollType'
      description: Type of the Poll
      example: simple
    poll_status:
      in: query
      name: status
      schema:
        $ref: '#/components/schemas/PollStatus'
      description: Status of the Poll
      example: draft
    question_type:
      in: query
      name: type
      schema:
        $ref: '#/components/schemas/QuestionType'
      description: Type of the Question
      example: advice
