openapi: 3.0.3
info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  license:
    name: MIT License
    url: https://opensource.org/licenses/mit-license.php
  contact:
    url: https://github.com/ita-social-projects/Home
  version: 1.0.0
servers:
  - url: /api/0
tags:
  - name: news
    description: News management operations
  - name: user
    description: User management operations
  - name: contact
    description: Contact management operations
paths:
  /news:
    post:
      tags:
        - news
      summary: Add a News to the home page
      description: The endpoint adds a News to the home page
      operationId: createNews
      requestBody:
        description: A payload for creating a new News
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNews'
        required: true
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all News to the home page
      description: This endpoint delivers all News to the Home Page
      operationId: getAllNews
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
          description: Arranging items in specific order
        - in: query
          name: filter
          schema:
            type: string
          description: Filter items by fields
        - in: query
          name: id
          schema:
            type: string
          description: The ID of the News
        - in: query
          name: title
          schema:
            type: string
          description: The title of the News
        - in: query
          name: text
          schema:
            type: string
          description: The content of the News
        - in: query
          name: source
          schema:
            type: string
          description: The source of the News
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its ID
      description: View an existing news by its ID
      operationId: getNews
      parameters:
        - name: id
          in: path
          description: ID value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing News
      description: Update an existing News by its ID
      operationId: updateNews
      parameters:
        - name: id
          in: path
          description: ID value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: A payload for updating an existing News
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNews'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      description: Delete news by ID
      operationId: deleteNews
      parameters:
        - name: id
          in: path
          description: ID value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: The endpoint creates a new User
      operationId: createUser
      requestBody:
        description: A payload for creating a User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: Get all Users
      description: The endpoint gets all Users
      operationId: getAllUsers
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
          description: Arranging items in the specific order
        - in: query
          name: filter
          schema:
            type: string
          description: Filter items by fields
        - in: query
          name: id
          schema:
            type: string
          description: The ID of the User
        - in: query
          name: email
          schema:
            type: string
          description: The email of the User
        - in: query
          name: firstName
          schema:
            type: string
          description: The First Name of the User
        - in: query
          name: lastName
          schema:
            type: string
          description: The Last name of the User
        - in: query
          name: contactPhone
          schema:
            type: string
          description: Contact phone of the User
        - in: query
          name: contactEmail
          schema:
            type: string
          description: Contact email of the User
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}:
    get:
      tags:
        - user
      summary: Get User by ID
      description: The endpoint gets User by ID
      operationId: getUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current User
      description: The endpoint updates current User by ID
      operationId: updateUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: A payload for updating current User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: The ednpoint deletes User by ID
      operationId: deleteUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Success
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/contacts:
    post:
      tags:
        - contact
      summary: Create new Contact for the User
      description: The endpoint creates a new Contact for the specified user ID
      operationId: createContactOnUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: A payload for creating a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContact'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadContact'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - contact
      summary: Get all Contacts by User
      description: The endpoint retrieves the list of contacts associated with the specified user ID
      operationId: queryContactsOnUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
          description: Arraning items in specific order
        - in: query
          name: filter
          schema:
            type: string
          description: Filter items by fields
        - in: query
          name: id
          schema:
            type: string
          description: The ID of the Contact
        - in: query
          name: phone
          schema:
            type: string
          description: Phone of the Contact
        - in: query
          name: email
          schema:
            type: string
          description: Email of the Contact
        - in: query
          name: main
          schema:
            type: string
          description: Specifies if its a main Contact of the User
        - in: query
          name: type
          schema:
            type: string
          description: Type of the Contact
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadContact"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/contacts/{contact_id}:
    get:
      tags:
        - contact
      summary: Get Contact by ID
      description: The endpoint retrieves an existing contact
                   associated with the specified User by User and Contact IDs
      operationId: getContactOnUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the Contact
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "contact_id"
          in: "path"
          description: The ID of the Contact
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadContact"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - contact
      summary: Update Contact
      description: The endpoint updates information on a contact that exists
                  in the system by the specified User and Contact IDs
      operationId: updateContactOnUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "contact_id"
          in: "path"
          description: The ID of the Contact
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: A payload for updating an existing Contact
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContact"
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadContact"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - contact
      summary: Delete Contact
      description: The endpoint deletes an existing Contact on a User associated with the
                   specified User and Contact IDs
      operationId: deleteContactOnUser
      parameters:
        - name: "user_id"
          in: "path"
          description: The ID of the User
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "contact_id"
          in: "path"
          description: The ID of the Contact
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Success
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: Validation Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Conflict with current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    BaseReadView:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 70
        photoUrl:
          type: string
          format: url
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          example: Gas turn off
        source:
          type: string
          example: Example
        text:
          type: string
          example: example
    CreateNews:
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photoUrl:
          type: string
          example: url
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          example: example
    UpdateNews:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
          example: example
        photoUrl:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 50
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    ApiError:
      type: object
      properties:
        responseCode:
          type: integer
          example: 404
        errorMessage:
          type: string
          example: example
    CreateUser:
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 254
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/CreateContact'
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ReadContact'
    UpdateUser:
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 254
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ContactType:
      description: Indicates the type of contact
      type: string
      enum: &contact_type_values
        - email
        - phone
    ReadContact:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/ReadEmailContact'
          phone: '#/components/schemas/ReadPhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    ReadEmailContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        email:
          type: string
          example: home@gmail.com
    ReadPhoneContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        phone:
          type: string
          example: "+380506617305"
    CreateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/CreateEmailContact'
          phone: '#/components/schemas/CreatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    CreateEmailContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      properties:
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: home@gmail.com
    CreatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      properties:
        phone:
          type: string
          example: "+380506617305"
    UpdateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/UpdateEmailContact'
          phone: '#/components/schemas/UpdatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    UpdateEmailContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      properties:
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: other@gmail.com
    UpdatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      properties:
        phone:
          type: string
          example: "+380966617305"
